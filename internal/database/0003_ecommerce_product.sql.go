// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0003_ecommerce_product.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO ` + "`" + `product` + "`" + ` (
    name,
    description,
    price,
    quantity,
    image_url
)
VALUES (?, ?, ?, ?, ?)
ON DUPLICATE KEY 
UPDATE
    quantity = quantity  + VALUES(quantity)
`

type CreateProductParams struct {
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.ImageUrl,
	)
}

const deleteProduct = `-- name: DeleteProduct :execresult
UPDATE ` + "`" + `product` + "`" + `
SET deleted_at = NOW()
WHERE id = ? AND deleted_at is NULL
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteProduct, id)
}

const getProductByID = `-- name: GetProductByID :one
SELECT
    id, name, description, price, quantity, image_url
FROM 
    ` + "`" + `product` + "`" + `
WHERE
    id = ? AND deleted_at IS NULL
`

type GetProductByIDRow struct {
	ID          int32
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
}

func (q *Queries) GetProductByID(ctx context.Context, id int32) (GetProductByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.ImageUrl,
	)
	return i, err
}

const getProductByIDForUpdate = `-- name: GetProductByIDForUpdate :one
SELECT
    id, name, description, price, quantity, image_url
FROM 
    ` + "`" + `product` + "`" + `
WHERE
    id = ? AND deleted_at IS NULL
FOR UPDATE
`

type GetProductByIDForUpdateRow struct {
	ID          int32
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
}

func (q *Queries) GetProductByIDForUpdate(ctx context.Context, id int32) (GetProductByIDForUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByIDForUpdate, id)
	var i GetProductByIDForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.ImageUrl,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, description, price, quantity, image_url
FROM ` + "`" + `product` + "`" + `
WHERE deleted_at IS NULL
LIMIT ?
OFFSET ?
`

type GetProductsParams struct {
	Limit  int32
	Offset int32
}

type GetProductsRow struct {
	ID          int32
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuantity = `-- name: GetQuantity :one
SELECT
    quantity
FROM 
    ` + "`" + `product` + "`" + `
WHERE 
    id = ? AND deleted_at IS NULL
`

func (q *Queries) GetQuantity(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getQuantity, id)
	var quantity int32
	err := row.Scan(&quantity)
	return quantity, err
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE ` + "`" + `product` + "`" + `
SET
    name = ?,
    description = ?,
    price = ?,
    quantity = ?,
    image_url = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdateProductParams struct {
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
	ID          int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.ImageUrl,
		arg.ID,
	)
}

const updateProductByID = `-- name: UpdateProductByID :execresult
UPDATE ` + "`" + `product` + "`" + `
SET
    quantity = ?
WHERE
    id = ? AND deleted_at IS NULL
`

type UpdateProductByIDParams struct {
	Quantity int32
	ID       int32
}

func (q *Queries) UpdateProductByID(ctx context.Context, arg UpdateProductByIDParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProductByID, arg.Quantity, arg.ID)
}
