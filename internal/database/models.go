// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type OrderPaymentMethod string

const (
	OrderPaymentMethodCOD  OrderPaymentMethod = "COD"
	OrderPaymentMethodMOMO OrderPaymentMethod = "MOMO"
	OrderPaymentMethodBANK OrderPaymentMethod = "BANK"
)

func (e *OrderPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderPaymentMethod(s)
	case string:
		*e = OrderPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderPaymentMethod: %T", src)
	}
	return nil
}

type NullOrderPaymentMethod struct {
	OrderPaymentMethod OrderPaymentMethod
	Valid              bool // Valid is true if OrderPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.OrderPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderPaymentMethod), nil
}

type OrderStatus string

const (
	OrderStatusCreate  OrderStatus = "create"
	OrderStatusConfirm OrderStatus = "confirm"
	OrderStatusPay     OrderStatus = "pay"
	OrderStatusShip    OrderStatus = "ship"
	OrderStatusFinish  OrderStatus = "finish"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Cart struct {
	ID        int32
	UserID    int32
	ProductID int32
	Quantity  int32
}

type Order struct {
	ID              int32
	UserID          int32
	PaymentMethod   OrderPaymentMethod
	Status          NullOrderStatus
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	ShippingAddress string
	Total           int64
}

type OrderItem struct {
	ID          int32
	OrderID     int32
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
	CreatedAt   sql.NullTime
}

type Product struct {
	ID          int32
	Name        string
	Description sql.NullString
	Price       int64
	Quantity    int32
	ImageUrl    string
	CreatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

type User struct {
	ID        int32
	Email     string
	Password  string
	Role      NullUserRole
	CreatedAt sql.NullTime
}

type UserProfile struct {
	ID          int32
	UserID      int32
	FirstName   sql.NullString
	LastName    sql.NullString
	PhoneNumber sql.NullString
	Address     sql.NullString
}
