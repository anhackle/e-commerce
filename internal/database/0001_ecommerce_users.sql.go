// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_ecommerce_users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    email,
    password
)
VALUES (?, ?)
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, password
FROM ` + "`" + `user` + "`" + `
WHERE email = ?
`

type FindByEmailRow struct {
	ID       int32
	Email    string
	Password string
}

func (q *Queries) FindByEmail(ctx context.Context, email string) (FindByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, email)
	var i FindByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const findByUserId = `-- name: FindByUserId :one
SELECT id, email, password
FROM ` + "`" + `user` + "`" + `
WHERE id = ?
`

type FindByUserIdRow struct {
	ID       int32
	Email    string
	Password string
}

func (q *Queries) FindByUserId(ctx context.Context, id int32) (FindByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, findByUserId, id)
	var i FindByUserIdRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE ` + "`" + `user` + "`" + `
SET
    password = ?
WHERE id = ?
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}
