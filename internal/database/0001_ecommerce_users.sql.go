// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_ecommerce_users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    email,
    password
)
VALUES (?, ?)
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
}

const createUserProfile = `-- name: CreateUserProfile :execresult
INSERT INTO ` + "`" + `user_profile` + "`" + ` (
    user_id
) VALUES (?)
`

func (q *Queries) CreateUserProfile(ctx context.Context, userID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserProfile, userID)
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, password, role
FROM ` + "`" + `user` + "`" + `
WHERE email = ?
`

type FindByEmailRow struct {
	ID       int32
	Email    string
	Password string
	Role     NullUserRole
}

func (q *Queries) FindByEmail(ctx context.Context, email string) (FindByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, email)
	var i FindByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const findByUserId = `-- name: FindByUserId :one
SELECT id, email, password, role
FROM ` + "`" + `user` + "`" + `
WHERE id = ?
`

type FindByUserIdRow struct {
	ID       int32
	Email    string
	Password string
	Role     NullUserRole
}

func (q *Queries) FindByUserId(ctx context.Context, id int32) (FindByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, findByUserId, id)
	var i FindByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUsersForAdmin = `-- name: GetUsersForAdmin :many
SELECT id, email, role
FROM ` + "`" + `user` + "`" + `
WHERE role = ? and email LIKE ?
ORDER BY created_at DESC
LIMIT ?, ?
`

type GetUsersForAdminParams struct {
	Role   NullUserRole
	Email  string
	Offset int32
	Limit  int32
}

type GetUsersForAdminRow struct {
	ID    int32
	Email string
	Role  NullUserRole
}

func (q *Queries) GetUsersForAdmin(ctx context.Context, arg GetUsersForAdminParams) ([]GetUsersForAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersForAdmin,
		arg.Role,
		arg.Email,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersForAdminRow
	for rows.Next() {
		var i GetUsersForAdminRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE ` + "`" + `user` + "`" + `
SET
    password = ?
WHERE id = ?
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}

const updateRole = `-- name: UpdateRole :execresult
UPDATE ` + "`" + `user` + "`" + `
SET role = ?
WHERE id = ?
`

type UpdateRoleParams struct {
	Role NullUserRole
	ID   int32
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRole, arg.Role, arg.ID)
}
