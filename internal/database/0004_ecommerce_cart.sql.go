// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0004_ecommerce_cart.sql

package database

import (
	"context"
	"database/sql"
)

const addToCart = `-- name: AddToCart :execresult
INSERT INTO ` + "`" + `cart` + "`" + ` (
    user_id,
    product_id,
    quantity
)
VALUES (?, ?, ?)
ON DUPLICATE KEY 
UPDATE
    quantity = quantity  + VALUES(quantity)
`

type AddToCartParams struct {
	UserID    int32
	ProductID int32
	Quantity  int32
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
}

const deleteCart = `-- name: DeleteCart :execresult
DELETE 
FROM ` + "`" + `cart` + "`" + `
WHERE
    user_id = ?
`

func (q *Queries) DeleteCart(ctx context.Context, userID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCart, userID)
}

const deleteCartByID = `-- name: DeleteCartByID :execresult
DELETE
FROM ` + "`" + `cart` + "`" + `
WHERE
    user_id = ? AND id = ?
`

type DeleteCartByIDParams struct {
	UserID int32
	ID     int32
}

func (q *Queries) DeleteCartByID(ctx context.Context, arg DeleteCartByIDParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCartByID, arg.UserID, arg.ID)
}

const getCart = `-- name: GetCart :many
SELECT
    c.id AS cart_id,
    p.id AS product_id,
    p.name AS product_name,
    c.quantity AS quantity,
    p.image_url AS image_url,
    p.price AS product_price,
    (p.price * c.quantity) AS total
FROM ` + "`" + `cart` + "`" + ` c
JOIN
    ` + "`" + `product` + "`" + ` p ON c.product_id = p.id
WHERE
    c.user_id = ?
`

type GetCartRow struct {
	CartID       int32
	ProductID    int32
	ProductName  string
	Quantity     int32
	ImageUrl     string
	ProductPrice int64
	Total        int32
}

func (q *Queries) GetCart(ctx context.Context, userID int32) ([]GetCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.CartID,
			&i.ProductID,
			&i.ProductName,
			&i.Quantity,
			&i.ImageUrl,
			&i.ProductPrice,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :execresult
UPDATE ` + "`" + `cart` + "`" + `
SET quantity = ?
WHERE
    id = ? AND user_id = ? AND product_id = ?
`

type UpdateCartParams struct {
	Quantity  int32
	ID        int32
	UserID    int32
	ProductID int32
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCart,
		arg.Quantity,
		arg.ID,
		arg.UserID,
		arg.ProductID,
	)
}
