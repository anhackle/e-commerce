// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_ecommerce_users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    id,
    email,
    password
)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	ID       string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.ID, arg.Email, arg.Password)
}

const createUserProfile = `-- name: CreateUserProfile :execresult
INSERT INTO ` + "`" + `user_profile` + "`" + ` (
    id, user_id
) VALUES (?, ?)
`

type CreateUserProfileParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserProfile, arg.ID, arg.UserID)
}

const deleteUser = `-- name: DeleteUser :execresult
UPDATE ` + "`" + `user` + "`" + `
SET deleted_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, password, role
FROM ` + "`" + `user` + "`" + `
WHERE email = ? AND deleted_at IS NULL
`

type FindByEmailRow struct {
	ID       string
	Email    string
	Password string
	Role     NullUserRole
}

func (q *Queries) FindByEmail(ctx context.Context, email string) (FindByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, email)
	var i FindByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const findByUserId = `-- name: FindByUserId :one
SELECT id, email, password, role
FROM ` + "`" + `user` + "`" + `
WHERE id = ? AND deleted_at IS NULL
`

type FindByUserIdRow struct {
	ID       string
	Email    string
	Password string
	Role     NullUserRole
}

func (q *Queries) FindByUserId(ctx context.Context, id string) (FindByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, findByUserId, id)
	var i FindByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE ` + "`" + `user` + "`" + `
SET
    password = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdatePasswordParams struct {
	Password string
	ID       string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}

const updateRole = `-- name: UpdateRole :execresult
UPDATE ` + "`" + `user` + "`" + `
SET role = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdateRoleParams struct {
	Role NullUserRole
	ID   string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRole, arg.Role, arg.ID)
}
